Part : <./Data/ships/terran/base_part_terran.rules>/Part
       <../cables.rules>/Part
{
	NameKey = "Parts/Substation"
	IconNameKey = "Parts/SubstationIcon"
	ID = YBJ.MMCTsubstation // Part IDs must always be in the form of "author_name.part_name". If making your own mod, do *not* use "cosmoteer" as your author name, because it may conflict with future vanilla parts.
	EditorGroup = "Power"
	DescriptionKey = "Parts/SubstationDesc"
	Resources
	[
		[steel, 8]
		[coil2, 3]
		[tristeel, 1]
	]
	TypeCategories = [cable_receptor]
	ReceivableBuffs : ^/0/ReceivableBuffs [MMCTCableCable, MMCTCableCableFlood, ElectronDebuff, ElectronNebula]
	Size = [1, 1]
	MaxHealth = 1000
	AllowedDoorLocations
	[
		[0, 1]
	]
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [32, 32]
	}

	// Make it slightly bigger then cable so priority works, and so battery from large reactor fits.
	batteryStorageMax = 3000

	Components : ^/0/Components
	             ^/1/Components
	{

		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 1
		}

		// Inherited storages from cables.rules:
		// - ProxyBatteryStorage{Up,Down,Left,Right}
		// - BuffedBatteryStoragesNot{Up,Down,Left,Right}
		// - BatteryStorage => Combined from [BatteryStorageUp, BatteryStorageDown, BatteryStorageLeft, BatteryStorageRight]

		// Increase side storages to allow PrioritizeMostEmptyCapacity to work correctly
		RealBatteryStorageUp : ^/1/RealBatteryStorageUp
        {
            MaxResources = &~/Part/batteryStorageMax
        }
        RealBatteryStorageDown : ^/1/RealBatteryStorageDown
        {
            MaxResources = &~/Part/batteryStorageMax
        }
		RealBatteryStorageLeft : ^/1/RealBatteryStorageLeft
        {
            MaxResources = &~/Part/batteryStorageMax
        }
		RealBatteryStorageRight : ^/1/RealBatteryStorageRight
        {
            MaxResources = &~/Part/batteryStorageMax
        }

		BuffedSinks
		{
			Type = MultiResourceStorage
			ResourceType = battery
			ViaBuffs
			{
				OutgoingBuffProviders = [BuffProvider]
				ComponentIDs = [BatteryStorage, LocalBatteryStorage] // CombinedBatteryStorage, ExtendableBatteryStorage can be added when this is fixed: https://discord.com/channels/314103695568666625/1217997698993754254
			}
			AddMode = DistributeRandomly
			IncludeWhenUnderConstruction = false
		}
		BuffedSubstations : &BuffedSinks
		{
			ViaBuffs
			{
				OutgoingBuffProviders = [BuffProviderSubstations]
				ComponentID = BatteryStorage
			}
			AddMode = DistributeRandomly
		}
		BuffedPowerStorages : &BuffedSinks
		{
			ViaBuffs
			{
				OutgoingBuffProviders = [BuffProviderPowerStorage]
				ComponentID = BatteryStorage
			}
			AddMode = DistributeRandomly
		}
		BuffedEngines : &BuffedSinks
		{
			Type = MultiResourceStorage
			ResourceType = battery
			ViaBuffs
			{
				OutgoingBuffProviders = [BuffProvider]
				ComponentIDs = [CombinedBatteryStorage, ExtendableBatteryStorage] // can be added when this is fixed: https://discord.com/channels/314103695568666625/1217997698993754254
			}
			AddMode = DistributeRandomly
		}
		// This provides targets to be filled with power. InOrder to prioritize some categories.
		BuffedBatteryStorages
		{
			Type = MultiResourceStorage
			ResourceType = battery
			// ResourceStorages = [BuffedSinks, BuffedEngines, BuffedPowerStorages, BuffedSubstations]
			// AddMode = InOrder
			// // Above does not work properly - https://discord.com/channels/314103695568666625/1217997698993754254
			// // Bellow does work:
			ViaBuffs
			{
				OutgoingBuffProviders = [BuffProvider, BuffProviderSubstations, BuffProviderPowerStorage]
				ComponentIds = [BatteryStorage, LocalBatteryStorage]
			}
			AddMode = DistributeRandomly //InOrder //PrioritizeLeastResources //PrioritizeMostEmptyCapacity //DistributeRandomly //DistributeEvenly
			IncludeWhenUnderConstruction = false
		}

		// Buffs
		// Substation has categories: cable_receptor. Substations can power other substations, but that also creates power loops. Fixme?
		BuffProvider
		{
			Type = GridBuffProvider
			BuffType = MMCTCableReceptor
			GridDistance = 3
			OperationalToggle = PowerToggle
			Criteria {
			    Category = uses_power
			}
		}
		BuffProviderSubstations : &BuffProvider
		{
			Criteria {
				Category = cable_receptor
			}
		}
		// Not included in BuffedBatteryStorages intentionally.
		BuffProviderCables
		{
			Type = GridBuffProvider
			BuffType = MMCTCableCable
			GridDistance = 1
			OperationalToggle = PowerToggle
			Criteria {
			    Category = cable
			}
			BlueprintOnly = true
		}
		BuffProviderPowerStorage : &BuffProvider
		{
			Criteria {
			    Category = power_storage
			}
		}

		// // XXX: Experimental
		// BuffProviderFlood
        // {
        //     Type = FloodFillBuffProvider
        //     BuffType = MMCTCableCableFlood
        //     BuffRegion {
        //         Type = Grid
        //         GridDistance = 1
        //         AllowDiaginals = false
        //     }
        //     OperationalToggle = IsOperational
        //     BlueprintsOnly = false
        //     Criteria
        //     {
        //         TypeCategories = [cable, cable_receptor]
        //     }
        // }

		// Inherited from cables.rules:
		// - MoveBatteryPowerFrom{Up,Down,Left,Right}

		// Additional ResourceConverter to provide power to buff targets (not cables)
		BuffBatteryStorages
		{
			Type = ResourceConverter
			FromStorage = BatteryStorage
			FromQuantity = &~/Part/transferQuantity
			ToStorage = BuffedBatteryStorages
			ToQuantity = &~/Part/transferQuantity
			Interval = { BaseValue=(&~/Part/transferInterval); BuffType=ElectronDebuff; BuffMode=Divide; }
			// Interval = (&~/Part/transferInterval) - 0.001 // Dirty hack here to make it happen before MoveBatteryPowerFrom*
			OperationalToggle = PowerToggle
			MinToQuantityForConversion = &~/Part/transferQuantity
            MinFromQuantityForConversion = &~/Part/transferQuantity
		}
		
		// Allow batteries to be delivered manually by crew to substation
		BatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = battery
			Storage = BatteryStorage // This uses all side storages (BatteryStorage{Up,Down,Left,Right}) here.
			DefaultPriority = &/PRIORITIES/Thruster_Supply
			ResupplyThreshold = (&~/Part/transferQuantity)
			OperationalToggle = PowerToggle
		}

		Graphics
		{
			Type = Graphics
			Location = [.5, .5]
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [1, 1]
					}
					{
						File = "floor_33.png"
						Size = [1, 1]
					}
					{
						File = "floor_66.png"
						Size = [1, 1]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						File = "doodads.png"
						Size = [1, 1]
					}
					{
						File = "doodads_33.png"
						Size = [1, 1]
					}
					{
						File = "doodads_66.png"
						Size = [1, 1]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [1, 1]
					}
					{
						File = "walls_33.png"
						Size = [1, 1]
					}
					{
						File = "walls_66.png"
						Size = [1, 1]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						NormalsFile = "roof_normals.png"
						Size = [1, 1]
					}
					{
						File = "roof_33.png"
						NormalsFile = "roof_normals_33.png"
						Size = [1, 1]
					}
					{
						File = "roof_66.png"
						NormalsFile = "roof_normals_66.png"
						Size = [1, 1]
					}
				]
			}
		}
	

		AmmoSprites
		{
			Type = ResourceSprites
			Location = [.5, .5]
			ResourceStorage = BatteryStorage
			Layer = "doodads_high"
			HasZeroResourceSprite = false
			ResourceLevels
			[
				{
					File = "bat1.png"
					Size = [1, 1]
				}
				
				{
					File = "bat2.png"
					Size = [1, 1]
				}
				
				{
					File = "bat3.png"
					Size = [1, 1]
				}
				
				{
					File = "bat4.png"
					Size = [1, 1]
				}
				
				{
					File = "bat5.png"
					Size = [1, 1]
				}
				
				{
					File = "bat6.png"
					Size = [1, 1]
				}
			]
		}

		OperationalAnimation
		{
			Type = Graphics
			Location = [.5, .5]
			OperationalToggle = IsOperational
			OperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"anim1.png"
							"anim2.png"
							"anim3.png"
							"anim4.png"
							"anim5.png"
							"anim6.png"
							"anim7.png"
						]
						Size = [1, 1]
						AnimationInterval = 0.1
					}
				]
			}
		}

		ElectronDebuffToggle
		{
			Type = BuffToggle
			BuffType = ElectronDebuff
		}
		ElectronDebuffEffectsToggle
		{
			Type = MultiToggle
			Toggles = [ElectronDebuffToggle, BatteryStorage]
			Mode = All
		}

		ElectronNebulaEffects
		{
			Type = ContinuousEffects
			OperationalToggle = ElectronDebuffEffectsToggle
			Location = [0.5, 0.5]
			MediaEffectsIntensityFactor = { BaseValue=0.5; BuffType=ElectronNebula; BuffMode=Multiply; }
			MediaEffects
			[
				&<./Data/nebulas/electron/particles/electron_reactor_sizzle.rules>

				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "./Data/nebulas/electron/sounds/electron_cloud_reactor_weaken.wav"
					Volume = 20%
					MaxConcurrentVolume = &Volume
					MaxConcurrent = 1
				}
			]
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/SmallPartDestroyedDry
			Location = [.5, 1]
			IncludeWhenUnderConstruction = false

			FactorHitEffectsWith = BatteryStorage
			HitEffects
			[
				{
					Type = ResourceDrain
					ResourceType = battery
					Amount = 12000
					Radius = 3
					Delay = .05
					ExpandDuration = .1
					ExpandStartRadius = 4
					ExpandLoss = 100%
					Filter
					{
						OperationalHealth = true
						StructuralHealth = false
						Friendlies = true
					}
				}
			]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [0.5, 0.5]
			Layer = "indicators"
			Indicators
			[
				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [0.5, 0.5]
					}
				}
			]
		}
		
		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [1, 1]
		}
	}

	Stats : ^/1/Stats
	{
		MMCTSupplyDistanceA = (&~/Part/Components/BuffProvider/GridDistance)
		MMCTSupplyDistanceL = 1
	}

}
